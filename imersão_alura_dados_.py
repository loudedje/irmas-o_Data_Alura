# -*- coding: utf-8 -*-
"""Imersão_Alura_Dados_

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OqpBkbynGNWDvHnKlhb9kOG5dI_5NlFH
"""

import pandas as pd

df = pd.read_csv("https://raw.githubusercontent.com/guilhermeonrails/data-jobs/refs/heads/main/salaries.csv")

df.head(10)

df.info()

df.describe()

df.shape

linhas, colunas = df.shape[0],df.shape[1]

print("linhas", linhas)
print("Colunas", colunas)

df.columns

#dicionario de renomeação
renomear_colunas = {
    'work_year': 'ano',
    'experience_level': 'senioridade',
    'employment_type': 'contrato',
    'job_title': 'cargo',
    'salary': 'salario',
    'salary_currency': 'moeda',
    'salary_in_usd': 'usd',
    'employee_residence': 'residencia',
    'remote_ratio': 'remoto',
    'company_location': 'empresa',
    'company_size': 'tamanho_empresa'
}

df.rename(columns=renomear_colunas, inplace=True)

df.head()

"""
Analisando quais sãos as categorias das colunas categóricas"""

df['senioridade'].value_counts()

df["remoto"].value_counts()

df["tamanho_empresa"].value_counts()

senioridade = {
    'SE': 'Senior',
    'MI': 'Pleno',
    'EN': 'Junior',
    'EX': 'Executivo'
}

"""Aula 2 - Limpar e Preparar dados

"""

df.head()

df.isnull()

df.isnull().sum()

df['ano'].unique()

df[df.isnull().any(axis=1)]

import numpy as np

import pandas as pd
import numpy as np

# Criando o DataFrame corretamente com um dicionário
df_salarios = pd.DataFrame({
    'nome': ['Loude', 'Djema', 'Sime', 'Vaica', 'val'],
    'salario': [1000, np.nan, 3000, np.nan, 500]
})

# Preenchendo valores NaN com a média dos salários
df_salarios['salario'] = df_salarios['salario'].fillna(df_salarios['salario'].mean().round(2))
df_salarios['salario_mediana'] = df_salarios['salario'].fillna(df_salarios['salario'].median())

#print(df_salarios)
df_salarios

df_temperaturas = pd.DataFrame({
        'Dia' : ['Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta','Sabado'],
        'Temperatura' : [30, np.nan, np.nan, 28, 27, np.nan]

})
df_temperaturas['preenchido_fill'] = df_temperaturas['Temperatura'].ffill()
df_temperaturas

df_temperaturas = pd.DataFrame({
        'Dia' : ['Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta','Sabado'],
        'Temperatura' : [30, np.nan, np.nan, 28, 27, np.nan]

})
df_temperaturas['preenchido_bfill'] = df_temperaturas['Temperatura'].bfill()
df_temperaturas

df_cidades = pd.DataFrame({
        'nome': ['Loude', 'Djema', 'Sime', 'Vaica', 'val'],
        'cidade': ['Gonaives', np.nan, 'Jacmel', 'P-au-P', 'Leogane']

})
df_cidades['preenchido_ffill'] = df_cidades['cidade'].fillna('Não informa')
df_cidades

df_limpo = df.dropna()

df_limpo.isnull().sum()

df_limpo.head()

df_limpo.info()

df_limpo = df_limpo.assign(ano=df_limpo['ano'].astype(int))

#df_limpo.head()
df_limpo.info()

"""Crie Gráficos e Historias com dados"""

df_limpo['senioridade'].value_counts().plot(kind='bar', title='Distribução Senioridade')

import seaborn as sns

sns.barplot(data =df_limpo, x='senioridade', y='usd')

import matplotlib.pyplot as plt

plt.figure(figsize=(8,5))
sns.barplot(data =df_limpo, x='senioridade', y='usd')
plt.title('Salario por nivel de  Senioridade')
plt.xlabel('Senioridade')
plt.ylabel('USD')
plt.show()

df_limpo.groupby('senioridade')['usd'].mean().sort_values(ascending=False)

ordem = df_limpo.groupby('senioridade')['usd'].mean().sort_values(ascending=False).index

ordem

plt.figure(figsize=(10,5))
sns.histplot(df_limpo['usd'],bins=50, kde=False)
plt.title('Distribuição dos salarios anuais')
plt.xlabel('Salario em USD')
plt.ylabel('Frequencia')
plt.show()

plt.figure(figsize=(10,5))
sns.boxplot(x=df_limpo['usd'])
plt.title('Distribuição dos salarios anuais')
plt.xlabel('Salario em USD')
plt.ylabel('Frequencia')
plt.show()

ordem_senioridade = ['EX', 'SE', 'MI', 'EN']
plt.figure(figsize=(8,5))
sns.boxplot(x='senioridade', y='usd', data=df_limpo, order=ordem_senioridade)
plt.title('Distribuição salarial por senioridade')
plt.xlabel('Senioridade')
plt.ylabel('USD')
plt.show()

ordem_senioridade = ['EX', 'SE', 'MI', 'EN']
plt.figure(figsize=(8,5))
sns.boxplot(x='senioridade', y='usd', data=df_limpo, order=ordem_senioridade, palette='Set2', hue='senioridade')
plt.title('Distribuição salarial por senioridade')
plt.xlabel('Senioridade')
plt.ylabel('USD')
plt.show()

import plotly.express as px

df_senioridade_usd = df_limpo.groupby('senioridade')['usd'].mean().reset_index()

fig = px.bar(df_senioridade_usd, x='senioridade', y='usd', title='Média Salarial por Senioridade')
fig.show()

remoto_count = df_limpo['remoto'].value_counts().reset_index()
remoto_count.columns = ['Tipo_trabalho', 'Quantidade']
fig = px.pie(remoto_count,
             names='Tipo_trabalho',
             values='Quantidade',
             title='Proporção dos tipos de trabalho'

             )
fig.show()

remoto_count = df_limpo['remoto'].value_counts().reset_index()
remoto_count.columns = ['Tipo_trabalho', 'Quantidade']
fig = px.pie(remoto_count,
             names='Tipo_trabalho',
             values='Quantidade',
             title='Proporção dos tipos de trabalho',
             hole=0.3

             )
fig.show()

remoto_count = df_limpo['remoto'].value_counts().reset_index()
remoto_count.columns = ['Tipo_trabalho', 'Quantidade']
fig = px.pie(remoto_count,
             names='Tipo_trabalho',
             values='Quantidade',
             title='Proporção dos tipos de trabalho',
             hole=0.3
             )
fig.update_traces(textinfo='percent+label')
fig.show()